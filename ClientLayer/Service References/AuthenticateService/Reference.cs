//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientLayer.Service_References.AuthenticateService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthenticateService.IAuthenticationService", CallbackContract=typeof(IAuthenticationServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AuthenticateAccount", ReplyAction="http://tempuri.org/IAuthenticationService/AuthenticateAccountResponse")]
        SharedLayer.Models.ClientIdentity AuthenticateAccount(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AuthenticateAccount", ReplyAction="http://tempuri.org/IAuthenticationService/AuthenticateAccountResponse")]
        System.Threading.Tasks.Task<SharedLayer.Models.ClientIdentity> AuthenticateAccountAsync(string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/OnClientAuthenticationDone", ReplyAction="http://tempuri.org/IAuthenticationService/OnClientAuthenticationDoneResponse")]
        void OnClientAuthenticationDone(bool success);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.DuplexClientBase<IAuthenticationService>, IAuthenticationService {
        
        public AuthenticationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public SharedLayer.Models.ClientIdentity AuthenticateAccount(string userName, string password) {
            return base.Channel.AuthenticateAccount(userName, password);
        }
        
        public System.Threading.Tasks.Task<SharedLayer.Models.ClientIdentity> AuthenticateAccountAsync(string userName, string password) {
            return base.Channel.AuthenticateAccountAsync(userName, password);
        }
    }
}
